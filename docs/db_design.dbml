/////////////////////////////////////////////
// StreakMate DB Schema (DBML for dbdiagram)
/////////////////////////////////////////////

Enum log_visibility {
  public
  followers
  private
}

Table users {
  id                 bigint [pk, increment]
  email              varchar(255) [not null, note: 'unique index']
  encrypted_password varchar(255) [not null]
  created_at         timestamp [not null]
  updated_at         timestamp [not null]

  Note: 'Devise-ready: encrypted_password instead of password'
}

Table profiles {
  id         bigint [pk, increment]
  user_id    bigint [not null, ref: > users.id]
  name       varchar(100) [not null]
  avatar     varchar(255)
  bio        text
  created_at timestamp [not null]
  updated_at timestamp [not null]
}

Table goals {
  id         bigint [pk, increment]
  user_id    bigint [not null, ref: > users.id]
  title      varchar(140) [not null]
  detail     text
  is_public  boolean [not null, default: true]
  created_at timestamp [not null]
  updated_at timestamp [not null]
}

Table logs {
  id         bigint [pk, increment]
  user_id    bigint [not null, ref: > users.id]
  goal_id    bigint [not null, ref: > goals.id]
  content    text
  logged_on  date [not null]
  minutes    int  [not null, default: 0, note: 'duration for analytics']
  visibility int  [not null, default: 0, note: 'Enum: log_visibility (public=0, followers=1, private=2)']
  created_at timestamp [not null]
  updated_at timestamp [not null]
}

Table cheers {
  id         bigint [pk, increment]
  user_id    bigint [not null, ref: > users.id]
  log_id     bigint [not null, ref: > logs.id]
  created_at timestamp [not null]
  updated_at timestamp [not null]
}

Table comments {
  id         bigint [pk, increment]
  user_id    bigint [not null, ref: > users.id]
  goal_id    bigint [ref: > goals.id, note: 'optional']
  log_id     bigint [ref: > logs.id, note: 'optional']
  content    text [not null]
  created_at timestamp [not null]
  updated_at timestamp [not null]

  Note: 'Validation: either goal_id or log_id must be present'
}

Table follows {
  id          bigint [pk, increment]
  follower_id bigint [not null, ref: > users.id]
  followed_id bigint [not null, ref: > users.id]
  created_at  timestamp [not null]
  updated_at  timestamp [not null]
}

Table favorites {
  id         bigint [pk, increment]
  user_id    bigint [not null, ref: > users.id]
  goal_id    bigint [not null, ref: > goals.id]
  created_at timestamp [not null]
  updated_at timestamp [not null]
}

Table notifications {
  id              bigint [pk, increment]
  user_id         bigint [not null, ref: > users.id, note: 'recipient']
  actor_id        bigint [not null, ref: > users.id, note: 'who triggered the event']
  notifiable_type varchar(50) [not null]
  notifiable_id   bigint [not null]
  action          varchar(30) [not null, note: '"followed", "cheered", "commented", ...']
  read_at         timestamp
  created_at      timestamp [not null]
  updated_at      timestamp [not null]

  Note: 'Polymorphic notification target via (notifiable_type, notifiable_id)'
}

Table settings {
  id            bigint [pk, increment]
  user_id       bigint [not null, ref: > users.id]
  reminder_time time   [not null, default: '23:00']
  reminder_on   boolean [not null, default: true]
  created_at    timestamp [not null]
  updated_at    timestamp [not null]
}

////////////////////////////////////////////////////
// Indexes
////////////////////////////////////////////////////

Index "index_users_on_email" on users (email) [unique]

Index "index_profiles_on_user_id" on profiles (user_id) [unique]

Index "index_goals_on_user_id_is_public" on goals (user_id, is_public)

Index "index_logs_on_user_id_logged_on" on logs (user_id, logged_on)
Index "index_logs_on_goal_id" on logs (goal_id)

Index "index_cheers_on_user_id_log_id" on cheers (user_id, log_id) [unique]

Index "index_comments_on_goal_id" on comments (goal_id)
Index "index_comments_on_log_id"  on comments (log_id)

Index "index_follows_on_follower_id_followed_id" on follows (follower_id, followed_id) [unique]

Index "index_favorites_on_user_id_goal_id" on favorites (user_id, goal_id) [unique]

Index "index_notifications_on_user_id_read_at" on notifications (user_id, read_at)
Index "index_notifications_on_notifiable" on notifications (notifiable_type, notifiable_id)
