#!/usr/bin/env ruby
# frozen_string_literal: true

require "fileutils"

APP_ROOT = File.expand_path("..", __dir__)

def sh!(*args)
  system(*args, exception: true)
end

def sh?(*args)
  system(*args)
end

def say(msg)
  puts msg
end

FileUtils.chdir APP_ROOT do
  begin
    say "== Installing Ruby dependencies =="
    sh! "gem install bundler --conservative"
    sh?("bundle check") || sh!("bundle install")

    # --- .env bootstrap (no secrets committed) ---
    env_example = File.join(APP_ROOT, ".env.example")
    env_file    = File.join(APP_ROOT, ".env")
    if File.exist?(env_example) && !File.exist?(env_file)
      say "\n== Bootstrapping .env from .env.example =="
      FileUtils.cp env_example, env_file
    end

    # --- JS dependencies (yarn preferred, fallback to npm) ---
    if File.exist?(File.join(APP_ROOT, "package.json"))
      say "\n== Installing JS dependencies =="
      if sh?("yarn -v")
        sh! "yarn install"
      else
        sh! "npm install"
      end
    end

    # --- Database prepare & optional seeds ---
    say "\n== Preparing database =="
    sh! "bin/rails db:prepare"

    seeds = File.join(APP_ROOT, "db", "seeds.rb")
    if File.exist?(seeds)
      say "\n== Seeding database (optional; non-fatal) =="
      sh? "bin/rails db:seed"
    end

    # --- Housekeeping ---
    say "\n== Removing old logs and tempfiles =="
    sh! "bin/rails log:clear tmp:clear"

    say "\n== Restarting application server =="
    sh! "bin/rails restart"

    say "\n✅ Setup complete! You can now run: bin/dev"
  rescue => e
    warn "\n❌ Setup failed: #{e.class} - #{e.message}"
    warn "   Tip: Check your DB credentials in .env and that PostgreSQL is running."
    exit 1
  end
end
